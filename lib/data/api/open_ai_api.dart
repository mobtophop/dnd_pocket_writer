// ignore_for_file: constant_identifier_names

import 'dart:convert';

import 'package:dnd_pocket_writer/data/api/failure.dart';
import 'package:either_dart/either.dart';
import 'package:http/http.dart';

enum Method {
  HEAD,
  GET,
  POST,
  PUT,
  PATCH,
  DELETE,
}

class OpenAiApi {
  final String _baseUrl = "api.openai.com";

  Future<Either<Failure, BaseResponse>> _fetchData(
    final String endpoint,
    final String apiKey,
    final Method httpMethod, {
    final Map<String, dynamic>? params,
    final Map<String, String>? headers,
    final Map<String, dynamic>? body,
  }) async {
    Uri uri = Uri.https(
      _baseUrl,
      endpoint,
      params,
    );

    BaseResponse? response;

    switch (httpMethod) {
      case Method.GET:
        break;
      case Method.POST:
        Request request = Request(
          "POST",
          uri,
        );

        request.headers.addAll({
          "Content-Type": "application/json",
          "Authorization": "Bearer $apiKey",
          ...?headers,
        });

        if (body != null) request.bodyBytes = jsonEncode(body).codeUnits;

        response = await request.send();
        break;
      case Method.PUT:
        break;
      case Method.HEAD:
        break;
      case Method.PATCH:
        break;
      case Method.DELETE:
        break;
    }

    if (response == null) {
      return const Left(Failure(code: 0, message: 'Null response!'));
    } else {
      return Right(response);
    }
  }

  Future<Either<Failure, StreamedResponse>> generateStory({
    required String apiKey,
    required String prompt,
  }) async {
    return await _fetchData(
      "v1/chat/completions",
      apiKey,
      Method.POST,
      body: {
        "model": "gpt-4",
        "messages": [
          {
            "role": "user",
            "content": prompt,
          }
        ],
        "temperature": 0.7,
        "stream": true,
      },
    ) as Either<Failure, StreamedResponse>;
  }

  Future<Either<Failure, Response>> generatePrompts({
    required String apiKey,
    required String story,
  }) async {
    return await _fetchData(
      "v1/chat/completions",
      apiKey,
      Method.POST,
      body: {
        "model": "gpt-4",
        "messages": [
          {
            "role": "user",
            "content": "Based on a story, generated by you: \n\"$story\";"
                "\n write a short list of prompts strictly describing the "
                "story protagonist's appearance so another AI could generate "
                "their portrait. And make it no longer than 800 characters",
          }
        ],
        "temperature": 0.2,
      },
    ) as Either<Failure, Response>;
  }

  Future<Either<Failure, Response>> generateImage({
    required String apiKey,
    required String prompt,
  }) async {
    return await _fetchData(
      "v1/images/generations",
      apiKey,
      Method.POST,
      body: {
        "prompt": "a realistic oil painted long shot portrait "
            "in the style of a DnD book illustration of a character, "
            "described by these features: $prompt",
        "n": 1,
        "size": "1024x1024",
      },
    ) as Either<Failure, Response>;
  }
}
